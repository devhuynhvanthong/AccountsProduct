import Head from 'next/head'
import Image from 'next/image'
import { useRouter } from 'next/router'
import { useEffect, useState } from 'react'
import Footer from '../../src/components/mains/FooterComponent'
import useWindowDimensions from '../../src/components/uses/WindowDimensions'
import styles from '../../styles/Home.module.css'
import { post } from '../../utils/CallApi'
import Constants from '../../utils/Constants'
import Cookies from '../../utils/Cookies'
import Library from '../../utils/Library'
import Urls from '../../utils/Urls'
import Validation from '../../utils/Validations'
import loginMobile ; LoginComponent from '../../src/components/desktops/accounts/LoginComponent'
import LoginComponent as loginDesktop from '../../src/components/mobiles/accounts/LoginComponent'
export default function login(){
    
    const cookie = Cookies()
    const library = Library()
    const validation = Validation()
    const constants = Constants()
    const urls = Urls()
    const router = useRouter()
    let domain: string | string[] | undefined = undefined
    let {height_,width_} = useWindowDimensions()
    useEffect(()=> {
        if(library.checkLogin()){
          router.push('/')
        }
        domain = router.query.domain
      },[])

    const [isShowErrorPassword,setShowErrorPassword] = useState(true)
    const [isShowErrorUsername,setShowErrorUsername] = useState(true)
    const [errorPassword,setErrorPassword] = useState(validation.FIELD_REQUIRED)
    const [errorUsername,setErrorUsername] = useState(validation.FIELD_REQUIRED)
    const [isClickLogin,setClickLogin] = useState(true)
    const tranferPageBeforLogin = async () => {
        if(domain != undefined){
            try{
                const query = await post(urls.URL_GET_DOMAIN,{
                    code_service: domain
                },"")
                if(query.status==constants.SUCCESS){
                    library.startPageUrl(query.data)
                }else{
                    library.reloadPage(true)
                }
            }catch(e){
                library.reloadPage(true)
            }
          }else{
            library.reloadPage(true)
          }
    }

    const handleLogin = async (e) => {
        if(isClickLogin){
            let username_ = document.getElementById('username').value
            let password_ = document.getElementById('password').value
            if (username_.length <= 0) {
                setShowErrorUsername(false)
            }
    
            if (password_.length <= 0) {
                setShowErrorPassword(false)
            }
    
            if (password_.length > 0 && username_.length > 0) {
                let body = {
                    username: username_,
                    password: password_
                }
                setClickLogin(false)
                let data = await post(urls.URL_LOGIN, body)
                if(data.status==constants.SUCCESS){
                    setClickLogin(true)
                    library.createNotification(constants.SUCCESS,validation.LOGIN_SUCCES)
                    let data_ = {
                        accsessToken : data.data.data.accsess_token,
                        date: library.getDateTime()
                    }
                    const keys = constants.KEY_ACCESS_TOKEN
                    cookie.Set(keys,data_)
                    tranferPageBeforLogin(e)
                }else{
                    setClickLogin(true)
                    document.getElementById('password').value = ""
                    library.createNotification(constants.ERROR,validation.LOGIN_FAILED) 
                }
            }
        }
        
    }

    const handleEnterPassword = () => {
        setShowErrorPassword(true)
    }

    const handleEnterUsername = () => {
        setShowErrorUsername(true)
    }

    const handleForgotPassword = () => {
        library.createNotification(constants.WARNING,validation.FEATURE_NOT_DEVELOP)
    }
    return(
        <>
            <div className={styles.container}>
                <Head>
                    <title>Login - AiGooX</title>
                    <meta name="description" content="Generated by create next app" />
                    <link rel="icon" href="/favicon.ico" />
                </Head>
                {
                    library.isMobile() ? LoginComponent
                }
                <Footer/>
                
            </div>
        </>
    )
}